---
   - name: Install packages needed (genisoimage, mkisofs, syslinux, isomd5sum)
     ansible.builtin.yum:
       name: 
         - genisoimage
         - mkisofs
         - syslinux
         - isomd5sum
       state: latest

   - name: Mount installation ISO read-only
     ansible.builtin.mount:
       path: "{{ mnt_dir }}"
       src:  "{{ original_iso_full_path }}"
       fstype: "iso9660"
       opts: loop,ro
       state: mounted
     become: true

   - name: Get RHEL version out of original iso file
     ansible.builtin.shell: "blkid {{ original_iso_full_path }}"
     register: blkid_output

   - name: Set variables according to detected RHEL
     ansible.builtin.set_fact:
       rhel_label: "{{ blkid_output.stdout | regex_search('RHEL-(.*)-x86_64') }}"
       rhel_version: "{{ blkid_output.stdout | regex_search('.[.].') }}"

   - name: Print RHEL version and iso label
     ansible.builtin.debug:
       msg: "Automatically detected RHEL version is {{ rhel_version }}, iso file label is {{ rhel_label }}"

   - name: Create a working directory if it does not exist
     ansible.builtin.file:
       path: "{{ wrk_dir }}"
       state: directory

   - name: Copy ISO content to working directory
     ansible.builtin.copy:
       src: "{{ mnt_dir }}/"
       dest: "{{ wrk_dir }}/"
       remote_src: true
     become: true 

   - name: Unmount original ISO 
     ansible.builtin.mount:
       path: "{{ mnt_dir }}"
       state: unmounted
     become: true

   - name: Create ks.cfg file from template
     ansible.builtin.template:
       src: ks.cfg.j2
       dest: "{{ wrk_dir }}/ks.cfg"
     become: true

   - name: Insert ip address and netmask if network is static
     ansible.builtin.lineinfile:
       path: "{{ wrk_dir }}/ks.cfg"
       regexp: "^network --bootproto=static"
       line: "network --bootproto=static --ip={{ machine_ip }} --netmask={{ machine_netmask }}"
       backrefs: yes
     when: network_bootproto == "static"

   - name: Insert hostname if defined
     ansible.builtin.lineinfile:
       path: "{{ wrk_dir }}/ks.cfg"
       regexp: "^(network --bootproto=(.*)?)"
       line: \g<1> --hostname={{ machine_hostname }}
       backrefs: yes
     when: machine_hostname is defined

   - name: Insert DNS if defined
     ansible.builtin.lineinfile:
       path: "{{ wrk_dir }}/ks.cfg"
       regexp: "^(network --bootproto=(.*)?)"
       line: \g<1> --nameserver={{ dns_server }}
       backrefs: yes
     when: (network_bootproto == "static") and (dns_server is defined)

   - name: Insert gateway if defined
     ansible.builtin.lineinfile:
       path: "{{ wrk_dir }}/ks.cfg"
       regexp: "^(network --bootproto=(.*)?)"
       line: \g<1> --gateway={{ net_gateway }}
       backrefs: yes
     when: (network_bootproto == "static") and (net_gateway is defined)

   - name: Insert additional user and password if defined
     ansible.builtin.lineinfile:
       path: "{{ wrk_dir }}/ks.cfg"
       line: "user --name={{ additional_user_name }} --password={{ additional_user_pass | password_hash('sha512') }} --iscrypted"
       insertbefore: '%packages'
     when: (additional_user_name is defined) and (additional_user_pass is defined)

   - name: Include the additional user into an non-default group
     ansible.builtin.lineinfile:
       path: "{{ wrk_dir }}/ks.cfg"
       regexp: "^(user --name=(.*)?)"
       line: \g<1> --groups={{ additional_user_group }}
       backrefs: yes
     when: (additional_user_name is defined) and (additional_user_pass is defined) and (additional_user_group is defined)

   - name: Subscribe the system with subcription-manager in post script
     ansible.builtin.blockinfile:
       path: "{{ wrk_dir }}/ks.cfg"
       insertbefore: '%packages'
       block: |
         %post --log=/root/registration_results.out
         subscription-manager register --auto-attach --username={{ rhn_user }} --password={{ rhn_pass }}
         %end
     when: (rhn_user is defined) and (rhn_pass is defined)

   - name: Create isolinux.cfg file from template
     ansible.builtin.template:
       src: isolinux.cfg.j2
       dest: "{{ wrk_dir }}/isolinux/isolinux.cfg"
     become: true

   - name: Create grub.cfg file from template
     ansible.builtin.template:
       src: grub.cfg.j2
       dest: "{{ wrk_dir }}/EFI/BOOT/grub.cfg"
     become: true

   - name: Create customized RHEL iso image
     ansible.builtin.shell: 'mkisofs -o {{ cust_iso }} -b isolinux/isolinux.bin -J -R -l -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -e images/efiboot.img -no-emul-boot --joliet-long -graft-points -V "{{ rhel_label }}" {{ wrk_dir }}'
     become: true

   - name: Make it UEFI bootable
     ansible.builtin.shell: "isohybrid --uefi {{ cust_iso }}"
     become: true

   - name: Implant md5 to ISO file
     ansible.builtin.shell: "implantisomd5 {{ cust_iso }}"
     become: true

   - name: Remove workingdir with ISO content
     ansible.builtin.file:
       path: "{{ item }}"
       state: absent
     become: true
     loop:
        - "{{ wrk_dir }}"
        - "{{ mnt_dir }}"

   - name: Remove used packages (genisoimage, mkisofs, syslinux, isomd5sum)
     ansible.builtin.yum:
       name: 
         - genisoimage#
         - mkisofs
         - syslinux
         - isomd5sum
       state: absent