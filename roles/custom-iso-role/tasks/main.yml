---
- name: Install packages needed (genisoimage, mkisofs, syslinux, isomd5sum)
  ansible.builtin.dnf:
    name:
      - genisoimage
      - mkisofs
      - syslinux
      - isomd5sum
    state: present

- name: Mount installation ISO read-only
  become: true
  ansible.builtin.mount:
    path: "{{ my_mnt_dir }}"
    src: "{{ my_original_iso_full_path }}"
    fstype: "iso9660"
    opts: loop,ro
    state: mounted

- name: Get RHEL version out of original iso file
  register: blkid_output
  ansible.builtin.shell: "blkid {{ my_original_iso_full_path }}"

- name: Set variables according to detected RHEL
  ansible.builtin.set_fact:
    rhel_label: "{{ blkid_output.stdout | regex_search('RHEL-(.*)-x86_64') }}"
    rhel_version: "{{ blkid_output.stdout | regex_search('.[.].') }}"

- name: Print RHEL version and iso label
  ansible.builtin.debug:
    msg: "Automatically detected RHEL version is {{ rhel_version }}, iso file label is {{ rhel_label }}"

- name: Create a working directory if it does not exist
  ansible.builtin.file:
    path: "{{ my_working_dir }}"
    state: directory

- name: Copy ISO content to working directory
  become: true
  ansible.builtin.copy:
    src: "{{ my_mnt_dir }}/"
    dest: "{{ my_working_dir }}/"
    remote_src: true

- name: Unmount original ISO
  become: true
  ansible.builtin.mount:
    path: "{{ my_mnt_dir }}"
    state: unmounted

- name: Create ks.cfg file from template
  become: true
  ansible.builtin.template:
    src: ks.cfg.j2
    dest: "{{ my_working_dir }}/ks.cfg"

- name: Create isolinux.cfg file from template
  become: true
  ansible.builtin.template:
    src: isolinux.cfg.j2
    dest: "{{ my_working_dir }}/isolinux/isolinux.cfg"

- name: Create grub.cfg file from template
  become: true
  ansible.builtin.template:
    src: grub.cfg.j2
    dest: "{{ my_working_dir }}/EFI/BOOT/grub.cfg"

- name: Create customized RHEL iso image
  become: true
  ansible.builtin.shell: 'mkisofs -o {{ my_custom_iso }} -b isolinux/isolinux.bin -J -R -l -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -e images/efiboot.img -no-emul-boot --joliet-long -graft-points -V "{{ rhel_label }}" {{ my_working_dir }}'

- name: Make it UEFI bootable
  become: true
  ansible.builtin.shell: "isohybrid --uefi {{ my_custom_iso }}"

- name: Implant md5 to ISO file
  become: true
  ansible.builtin.shell: "implantisomd5 {{ my_custom_iso }}"

- name: Remove workingdir with ISO content
  become: true
  loop:
    - "{{ my_working_dir }}"
    - "{{ my_mnt_dir }}"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent

- name: Remove used packages (genisoimage, mkisofs, syslinux, isomd5sum)
  ansible.builtin.yum:
    name:
      - genisoimage#
      - mkisofs
      - syslinux
      - isomd5sum
    state: absent
